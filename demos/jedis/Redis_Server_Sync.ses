package demos.jedis;

// A version of the server protocol where asychronous request/response pairs are coalesced
// into synchronous methods with return values. The Scribble documentation recommends a naming 
// convention that would make it relatively easy to adapt the translation to do this.

// In the synchronous view we don't have to worry about client states for this simple protocol, 
// because we never call methods on the client.

typestate Redis_Server_Sync {
	session
		Init = {
           void WATCH(String[]): Watching
		}
	where
		Watching = {
			String GET(String): Watching,
			void WATCH(String[]): Watching,
			void MULTI(): Queued
		}

		Queued = {
		    void SET(String, String): Queued,
			void DISCARD(): end,
			Result EXEC(): <OK:end, FAIL:Queued>
		}
}
