package demos.jedis;

// This is roughly what we would end up with our current Scribble-to-typestate translation.
// We can't assume the synchronous "optimisation" here because it's incompatible with
// our approach to external choice.

typestate Redis_Server {
	session
		InitSession = {
           void sendWATCH(String[]): Watching
		}
	where
		Watching = {
			// The string is the _argument type_, which is forced to be the same for all components of the
			// choice. That doesn't work for Redis, but let's ignore that for now. 
			Watching_OperationLabel sendOperation_Watching(String): <
				GET: Waiting_Watching_GET,
				WATCH: Watching,
				MULTI: Queued
			>
		}

	 	Waiting_Watching_GET = {
			String receiveGET(): Watching
	 	}
		
		Queued = {
			Queued_OperationLabel sendOperation_Queued(String): <
		    	SET: Queued,
				DISCARD: end,
				EXEC: Waiting_Queued_EXEC
			>
		}
		
		Waiting_Queued_EXEC = {
			Result receiveEXEC(): <OK:end, FAIL:Queued>
		}
}
