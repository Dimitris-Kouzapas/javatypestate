aspect analyseBlock {

	private Set<VariableDecl> ClassDecl.fieldGraph = new HashSet<VariableDecl>();
	private Set<MethodDecl> ClassDecl.methodGraph = new HashSet<MethodDecl>(); //TODO instead of string put methodDecl

	void ClassDecl.analyse() {
		for(Iterator it = getFieldVariables().iterator(); it.hasNext(); ) {
			VariableDecl vd = (VariableDecl) it.next();
			if(vd.isTypestate())
				fieldGraph.add(vd);
		}

		for(Iterator it = getMethodDeclarations().iterator(); it.hasNext(); )
			((MethodDecl) it.next()).analyse();

/*
		for(Iterator it = fieldGraph.iterator(); it.hasNext();) {
			VariableDecl vd = (VariableDecl) it.next();
			NameStructure ng = new NameStructure(vd.getID());
			//TODO if there is a Typestate for ClassDecl
			createGraphNode(getTypestate().createTypestateGraph().main, ng);
//			getTypestate().createNodeGraph(ng, );

		}
*/
	}


//*********************************************************************************************************

	syn boolean MethodDecl.isAnalysed() = isAnalysed(this);
	inh boolean MethodDecl.isAnalysed(MethodDecl md);

	eq TypeDecl.getBodyDecl(int i).isAnalysed(MethodDecl md) = false;
	eq ClassDecl.getBodyDecl(int i).isAnalysed(MethodDecl md) = methodGraph.contains(md);

	syn boolean MethodDecl.setAnalysed() = setAnalysed(this);
	inh boolean MethodDecl.setAnalysed(MethodDecl md);

	eq TypeDecl.getBodyDecl(int i).setAnalysed(MethodDecl md) = false;
	eq ClassDecl.getBodyDecl(int i).setAnalysed(MethodDecl md) = methodGraph.add(md);

	private Map<ParameterDeclaration, NameStructure> MethodDecl.argGraph = new HashMap<ParameterDeclaration, NameStructure>();

	GraphNode MethodDecl.getGraphNode(ParameterDeclaration par) {
		analyse();
		return argGraph.get(par).argumentGraph();
	}

	syn GraphNode MethodDecl.createGraphNode(NameStructure name, GraphNode end) = getBlock().createGraphNode(name, end);

	void MethodDecl.analyse() {
		if(this.isAnalysed())
			return;
		setAnalysed();

		for(int i = 0; i < getNumParameter(); i++)
			if(getParameter(i).isTypestate())
				argGraph.put(getParameter(i), new NameStructure(getParameter(i).getID()));

		for(int i = 0; i < getNumParameter(); i++)
			if(getParameter(i).isTypestate()) {
				NameStructure ng = argGraph.get(getParameter(i));
				getBlock().analyseArgumentGraph(ng);
			}
		getBlock().analyse();
	}

	private Map<VariableDecl, NameStructure> Block.variableGraph = new HashMap<VariableDecl, NameStructure>();
	syn lazy boolean Stmt.analyse() = true;

	eq Block.analyse() {
		Set<VariableDecl> s = getLocalVariables();
		for(Iterator i = s.iterator(); i.hasNext();) {
			VariableDecl vd = (VariableDecl) i.next();
			if(vd.isTypestate() && vd.getNumDims() == 0)
				variableGraph.put(vd, analyseVariableGraph(vd.getID()));
		}
		for(int i = 0; i < getNumStmt(); i++)
			getStmt(i).analyse();
		return true;
	}

	eq LabeledStmt.analyse() = getStmt().analyse();
	eq WhileStmt.analyse() = getStmt().analyse();
	eq DoStmt.analyse() = getStmt().analyse();
	eq ForStmt.analyse() = getStmt().analyse();
	eq SwitchStmt.analyse() = getBlock().analyse();
	eq TryStmt.analyse() {
		getBlock().analyse();
		return hasFinally() ? getFinally().analyse() : false;
	}

	eq IfStmt.analyse() {
		getThen().analyse();
		return hasElse() ? getElse().analyse() : true;
	}

	private GraphNode Block.analyseNameStructure(NameStructure ng) {
		GraphNode n = new EndNode();
		for(int i = getNumStmt() - 1; i >= 0; i--)
			n = getStmt(i).createGraphNode(ng, n);
		return n;
	}

	syn NameStructure Block.analyseArgumentGraph(NameStructure ng) {
		GraphNode n = analyseNameStructure(ng);

		ng.addNameStructure(n);
		ng.setArgumentGraph(n);

		return ng;
	}

	syn NameStructure Block.analyseVariableGraph(String name) {
		NameStructure ng = new NameStructure(name);
		GraphNode n = analyseNameStructure(ng);

		if(n instanceof InitNode)
			ng.addNameStructure(n);
		else if(!(n instanceof EndNode))
			ng.addErrorGraph(n);

		return ng;
	}


}
