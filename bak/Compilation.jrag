import beaver.*;
import java.io.*;
import JavaTypestate.parser.*;
import JavaTypestate.scanner.*;

aspect Compilation {
	JavaParser Program.parser;
	String CompilationUnit.dirPath;
	String CompilationUnit.filePath;

	protected String Program.getDirPath(String filePath) {
		int index;
		if((index = filePath.lastIndexOf(File.separatorChar)) != -1)
			return filePath.substring(0, index + 1);
		return "." + File.separatorChar;
	}

	protected String Program.getFileName(String filePath) {
		int index;
		if((index = filePath.lastIndexOf(File.separatorChar)) != -1)
			return filePath.substring(index + 1, filePath.length());
		return filePath;
	}

	public static String Program.filesuffix() {
		return ".tstj";
	}

	//Assumptions for calling compileFile
	//dirPath + filePath exists
	//filePath has the filesuffix()
	//filePath is either the file name or the package + the file name
	CompilationUnit Program.compileFile(String dirPath, String filePath) {
		CompilationUnit u = null;
		String path = dirPath + filePath;

		for(int i = 0; i < getNumCompilationUnit(); i++)
			if(getCompilationUnit(i).filePath.equals(path))
				return getCompilationUnit(i);

		try{
			FileInputStream fileStream = new FileInputStream(path);
			u = (CompilationUnit) parser.parse(fileStream, path);
		}
		catch(FileNotFoundException e) {
			return null;
		}
		catch(IOException e) {
			return null;
		}
		catch(CompilationUnitException e) {			//TODO I dont like this
			errors.addAll(e.getCompilationUnit().errors);
			return null;
		}

		String s = u.getPackageDecl().replace('.', File.separatorChar) + File.separatorChar + u.getTypeDecl().getID() + filesuffix();
		if(getDirPath(filePath).equals("./") || s.equals(filePath)) {
			u.filePath = path;
			u.dirPath = getDirPath(path);
			addCompilationUnit(u);
		}
		else
			return null;
		return u;
	}

	public boolean Program.compile(String[] args) {
		for(int i = 0; i < args.length; i++)
			if(new File(args[i]).exists())
				if(!args[i].endsWith(filesuffix()))
					System.err.println("File " + args[i] + " should have suffix: " + filesuffix());
				else
					compileFile(getDirPath(args[i]), getFileName(args[i]));
			else
				System.err.println("File " + args[i] + " not found.");

		for(int i = 0; i < getNumCompilationUnit(); i++) {
			getCompilationUnit(i).collect();
			errors.addAll(getCompilationUnit(i).errors);
		}

		return !hasErrors();
	}

//	public String[] Program.compileFiles() {
//		int j = 0;
//		for(int i = 0; i < getNumCompilationUnit(); i++)
//			if(!getCompilationUnit(i).isTypestateUnit())
//				j++;
//
//		String [] s = new String[j];
//		j = 0;
//		for(int i = 0; i < getNumCompilationUnit(); i++)
//			if(!getCompilationUnit(i).isTypestateUnit())
//				s[j++] = getCompilationUnit(i).filePath;
//
//		return s;
//	}

	class TypestateMain extends Program {
		public TypestateMain(JavaParser parser) {
			this.parser = parser;
		}

		public TypestateMain() {
			this.parser = new JavaParser();
		}

		private void myDebug(String[] args) {
			if(compile(args)) {
				ClassDecl cd1 = (ClassDecl) getCompilationUnit(0).getTypeDecl();
//				TypestateDecl td1 = ((TypestateDecl) getCompilationUnit(0).getTypeDecl());
//				TypestateDecl td2 = ((TypestateDecl) getCompilationUnit(1).getTypeDecl());
//				td1.createTypestateGraph().print();
//				td1.createTypestateGraph().debugCompare(td2.createTypestateGraph());
			}
			else {
				printErrors();
			}
		}

		public static void main(String [] args) {
			new TypestateMain(new JavaParser()).myDebug(args);
		}
	}
}
