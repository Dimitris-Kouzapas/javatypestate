aspect LookupType {

	syn boolean CompilationUnit.localLookupType(String name) = getTypeDecl().getID().equals(name);

	inh CompilationUnit CompilationUnit.getCompilationUnit(String dirPath, String filePath);
	eq Program.getCompilationUnit(int i).getCompilationUnit(String dirPath, String filePath) = compileFile(dirPath, filePath);

	inh CompilationUnit PackageAccess.lookupType(String name);
	inh CompilationUnit PackageOrTypeAccess.lookupType(String name);
	inh CompilationUnit ParseName.lookupType(String name);
	inh CompilationUnit MethodAccess.lookupType(String name);
	inh CompilationUnit ParameterDeclaration.lookupType(String name);
	inh CompilationUnit VarDeclStmt.lookupType(String name);
	inh CompilationUnit Block.lookupType(String name);
	inh CompilationUnit FieldDecl.lookupType(String name);
	inh CompilationUnit MethodDecl.lookupType(String name);
	inh CompilationUnit ClassDecl.lookupType(String name);

	eq CompilationUnit.getTypeDecl().lookupType(String name) = lookupType(name);
	//For consistency
	eq CompilationUnit.getImportDecl().lookupType(String name) = null;

	syn CompilationUnit CompilationUnit.lookupType(String name) {
		if (localLookupType(name))
			return this;

		if(new File(dirPath + name + Program.filesuffix()).exists())
			return getCompilationUnit(dirPath, name + Program.filesuffix());

		for(int i = 0; i < getNumImportDecl(); i++) {
			String s, ss;
			if((ss = getImportDecl(i).importName(name)) != null) {
				s = dirPath + ss.replace('.', File.separatorChar) + Program.filesuffix();
				if(new File(s).exists())
					return getCompilationUnit(dirPath, ss.replace('.', File.separatorChar) + Program.filesuffix());
			}
		}
		return null;
	}

	syn lazy String ImportDecl.toString() = getAccess().typeAccessID();

	syn String ImportDecl.importName(String name) = null;
	eq SingleTypeImportDecl.importName(String name) = toString().endsWith(name) ? toString() : null;
	eq TypeImportOnDemandDecl.importName(String name) = toString() + "." + name;

}
