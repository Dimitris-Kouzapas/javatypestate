aspect LookupType {

	syn boolean CompilationUnit.localLookupType(String name) = getType().equals(name);

	inh CompilationUnit CompilationUnit.getCompilationUnit(String type);
	eq Program.getCompilationUnit(int j).getCompilationUnit(String type) {
		if(new File(type + Program.filesuffix()).exists())
			compile(type + Program.filesuffix());

		for(int i = 0; i < getNumCompilationUnit(); i++)
			if(getCompilationUnit(i).localLookupType(type))
				return getCompilationUnit(i);
		return null;
	}

	private String CompilationUnit.getPackageString() {
		return getPackageDecl().equals("") ? "" : getPackageDecl().replace('.', File.separatorChar) + File.separatorChar;
	}

	private String CompilationUnit.getType() {
		return getID().startsWith(getPackageString()) ? getID() : getPackageString() + getID();
	}

	private String CompilationUnit.getID() {
		return getTypeDecl().getID();
	}

	syn TypeDecl CompilationUnit.lookupType(String name) {
		TypeDecl p;
		if((p = getPrimitiveType(name)) != null)
			return p;

		String type;
		type = name.startsWith(getPackageString()) ? name : getPackageString() + name;

		if(localLookupType(type))
			return this.getTypeDecl();

		CompilationUnit cu;
		if((cu = getCompilationUnit(type)) != null)
			return cu.getTypeDecl();

		for(int i = 0; i < getNumImportDecl(); i++) {
			String s;
			if((s = getImportDecl(i).importType(name)) != null)
				if((cu = getCompilationUnit(s.replace('.', File.separatorChar))) != null)
					return cu.getTypeDecl();
		}

		return new UnknownTypeDecl(new Modifiers(), name, new List<BodyDecl>());
	}

	syn TypeDecl CompilationUnit.lookupType(String Package, String name) {
		if(Package.equals("")) {
			TypeDecl p;
			if((p = getPrimitiveType(name)) != null)
				return p;
		}

		String type;
		if(Package.equals(""))
			return lookupType(name);

		if(Package.equals(getPackageString()))
			type = getPackageString() + name;
		else
			for(int i = 0; i < getNumImportDecl(); i++) {
				String s = Package + "." + name;
				if(getImportDecl(i) instanceof SingleTypeImportDecl) {
					if(s.equals(getImportDecl(i).toString())) {
						type = s.replace('.', File.separatorChar);
						break;
					}
				}
				else if(getImportDecl(i) instanceof TypeImportOnDemandDecl) {
					if(Package.equals(getImportDecl(i).toString())) {
						type = s.replace('.', File.separatorChar);
						break;
					}
				}
			}

		if(localLookupType(type))
			return this.getTypeDecl();

		CompilationUnit cu;
		if((cu = getCompilationUnit(type)) != null)
			return cu.getTypeDecl();

//		for(int i = 0; i < getNumImportDecl(); i++) {
//			String s;
//			if((s = getImportDecl(i).importType(name)) != null)
//				if((cu = getCompilationUnit(s.replace('.', File.separatorChar))) != null)
//					return cu.getTypeDecl();
//		}

		return new UnknownTypeDecl(new Modifiers(), type, new List<BodyDecl>());
	}


	syn String ImportDecl.importType(String name);
	eq SingleTypeImportDecl.importType(String name) = getAccess().getTypeString().endsWith(name) ? getAccess().getTypeString() : null;
	eq TypeImportOnDemandDecl.importType(String name) =
			name.startsWith(getAccess().getTypeString()) ? name : getAccess().getTypeString() + "." + name;

	eq CompilationUnit.getTypeDecl().lookupType(String name) = lookupType(name);
	eq CompilationUnit.getImportDecl().lookupType(String name) = null;

	inh TypeDecl Access.lookupType(String name);
	syn lazy TypeDecl Access.lookupType() = lookupType(getTypeString());

}
