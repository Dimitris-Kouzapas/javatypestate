aspect typestateCheck {
	public void ClassDecl.typestateCheck() {
		getGraph();
	}

	public void MethodDecl.typestateCheck() {
	}

	public void VariableDecl.typestateCheck() {
		if(getTypeAccess().lookupType().isTypestateClassDeclType()) {		//TODO what if lookupType not found?
			typestate.reportErrors("Object handler is used uninitialised.");
			//TODO check if getTypestateDecl exists
			GraphNode t = getTypeAccess().lookupType().getTypestateDecl().createTypestate().normalise();
			typestate.checkTypestate(t, "The typestate of the created object does not match its declared typestate.");
		}
	}

	public void ParameterDeclaration.typestateCheck() {
		if(getTypeAccess().lookupType().isTypestateClassDeclType()) {		//TODO what if lookupType not found?
			typestate.reportErrors("Object handler is used uninitialised");
			//TODO check if getTypestateDecl exists
			GraphNode t = getTypeAccess().lookupType().getTypestateDecl().createTypestate().normalise();
			typestate.checkTypestate(t, "The typestate of the created object does not match its declared typestate.");
		}
	}

	public void MethodAccess.typestateCheck() {
		MethodDecl md= lookupMethod(getQualifiedType());		//TODO get a lookupMethod()
		if(md != null && md.isTypestateMethod()) {
			GraphNode t = md.getTypestateMethod().getTType().createTypestate();
			if(t != null) {
				t.normalise();
				typestate.checkTypestate(t, "The typestate of the returned object does not match the return typestate.");
			}
		}
	}

}
