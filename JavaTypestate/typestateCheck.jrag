aspect typestateCheck {
	public void ClassDecl.typestateCheck() {
		getGraph();
	}

	public void MethodDecl.typestateCheck() {
	}

	public void VariableDecl.typestateCheck() {
		if(getTypeAccess().lookupType().isTypestateClassDeclType()) {		//TODO what if lookupType not found?
			typestate.reportErrors();
			//TODO check if getTypestateDecl exists
			GraphNode t = getTypeAccess().lookupType().getTypestateDecl().createTypestate().normalise();
			typestate.checkTypestate(t);
		}
	}

	public void ParameterDeclaration.typestateCheck() {
		if(getTypeAccess().lookupType().isTypestateClassDeclType()) {		//TODO what if lookupType not found?
			typestate.reportErrors();
			//TODO check if getTypestateDecl exists
			GraphNode t = getTypeAccess().lookupType().getTypestateDecl().createTypestate().normalise();
			typestate.checkTypestate(t);
		}
	}

	public void MethodAccess.typestateCheck() {
		MethodDecl md= lookupMethod(getQualifiedType());		//TODO get a lookupMethod()
		if(md != null && md.isTypestateMethod()) {
			GraphNode t = md.getTypestateMethod().getTType().createTypestate();
			if(t != null) {
				t.normalise();
				for(int i = typestate.startTypestate.size() - 1; i >= 0; i--) {
					GraphNode n = typestate.startTypestate.get(i);
					n.normalise();
					if(!t.includes(n))
						addSemanticError(
							"The typestate returned object does not match the return type typestate."
						);
				}
			}
		}
	}

}
