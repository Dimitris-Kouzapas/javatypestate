aspect javaASTFunctionality {

	/*	CompilationUnit								*/
	protected CompilationUnit ASTNode.getCompilationUnitAncestor() {
		ASTNode node = this;
		while(node != null && !(node instanceof CompilationUnit))
			node = node.getParent();
		return (CompilationUnit) node;
	}

	eq CompilationUnit.getImportDecl(int i).getClassDeclAncestor() = null;		//TODO dont like
	eq CompilationUnit.getTypeDecl().getSwitchStmtAncestor() = null;		//TODO dont like

	/*	TypeDecl								*/
	syn lazy boolean TypeDecl.isTypestateDeclType() = false;
	syn lazy boolean TypeDecl.isClassDeclType() = false;
	syn lazy boolean TypeDecl.isEnumDeclType() = false;
	syn lazy boolean TypeDecl.isTypestateClassDeclType() = false;

	syn lazy TypestateDecl TypeDecl.getTypestateDecl() = null;
	syn lazy ClassDecl TypeDecl.getClassDecl() = null;
	syn lazy EnumDecl TypeDecl.getEnumDecl() = null;
	syn lazy TypestateClassDecl TypeDecl.getTypestateClassDecl() = null;

	eq TypeDecl.getBodyDecl(int i).getClassDeclAncestor() = null;

	/*	TypestateDecl								*/
	eq TypestateDecl.isTypestateDeclType() = true;
	eq TypestateDecl.getTypestateDecl() = this;

	/*	EnumDecl								*/
	eq EnumDecl.isEnumDeclType() = true;
	eq EnumDecl.getEnumDecl() = this;

	/*	ClassDecl								*/
	eq ClassDecl.isClassDeclType() = true;
	eq ClassDecl.getClassDecl() = this;

	eq ClassDecl.isEnumDeclType() = getEnumDecl() != null;
	eq ClassDecl.getEnumDecl() = enumDecl;

	eq ClassDecl.getBodyDecl(int i).getClassDeclAncestor() = this;

	/*	TypestateClassDeclType							*/
	eq TypestateClassDecl.isTypestateClassDeclType() = true;
	eq TypestateClassDecl.getTypestateClassDecl() = this;
	syn lazy boolean TypestateClassDecl.existsTypestateDecl() = getTypestateDecl() != null;
	syn lazy TypestateDecl TypestateClassDecl.getTypestateDecl() =
		getTypestateArg().lookupType().isTypestateDeclType() ? getTypestateArg().lookupType().getTypestateDecl() : null;

	/*	MethodDecl								*/
	//inh ClassDecl MethodDecl.getClassDeclAncestor();

	eq MethodDecl.getBlock().getMethodDeclAncestor() = this;
	eq CompilationUnit.getTypeDecl().getMethodDeclAncestor() = null;
	eq ImportDecl.getAccess().getMethodDeclAncestor() = null;

	coll Set<VariableDecl> MethodDecl.getUsedTypestateFields() [new HashSet<VariableDecl>()] with add root MethodDecl;

	syn lazy boolean MethodDecl.isTypestateMethod() = getTypestateMethod() != null;
	syn lazy TypestateMethod MethodDecl.getTypestateMethod() {
		ClassDecl cd = getClassDeclAncestor();
		if(cd.isTypestateClassDeclType()) {
			TypestateDecl t = ((TypestateClassDecl) cd).getTypestateDecl();
			if(t != null)
				for(TypestateMethod m : t.getMethods())
					if(isTarget(m.getID(), m.getParameterTypes()))
						return m;
		}
		return null;
	}

	coll Set<MethodDecl> MethodDecl.selfSuccessors() [new HashSet<MethodDecl>()] with add root MethodDecl;
	coll Set<MethodAccess> MethodDecl.selfMethodAccess() [new HashSet<MethodAccess>()] with add root MethodDecl;

	syn lazy String MethodDecl.signature() {
		// TODO Dont need getModifiers().toString();??
		String s = getTypeAccess().toString() + " " + getID() + "(";
		for(int i = 0; i < getNumParameter(); i++) {
			if (i != 0)
				s += ", ";
			s += getParameter(i).getTypeAccess().toString();
		}
		return s + ")";
	}

	/*	MethodAccess							*/

	MethodAccess contributes getTarget() when getTarget() != null && isThisAccess() == true
	to MethodDecl.selfSuccessors() for getMethodDeclAncestor();

	MethodAccess contributes this when getTarget() != null && isThisAccess() == true
	to MethodDecl.selfMethodAccess() for getMethodDeclAncestor();

	inh ClassDecl MethodAccess.getClassDeclAncestor();
	inh MethodDecl MethodAccess.getMethodDeclAncestor();
	syn Set<VariableDecl> MethodAccess.getTypestateFields() = getClassDeclAncestor().getTypestateFields();

	syn lazy Set<MethodDecl> MethodAccess.selfSuccessors() = getTarget() != null ? getTarget().selfSuccessors() : new HashSet<MethodDecl>(); 
	syn Set<MethodDecl> MethodAccess.reachable() circular [new HashSet<MethodDecl>()];

	eq MethodAccess.reachable() {
		Set result = new HashSet<MethodDecl>();
		result.addAll(selfSuccessors());
		for(MethodDecl md: selfSuccessors())
			for(MethodAccess ma : md.selfMethodAccess())
				result.addAll(ma.reachable());

		return result;
	}

	syn lazy boolean MethodAccess.isRecursiveCall() = reachable().contains(getMethodDeclAncestor());
	syn lazy MethodDecl MethodAccess.getTarget() = lookupMethod(getQualifiedType());

	syn lazy String MethodAccess.signature() {
		String s = getID() + "(";
		for(int i = 0; i < getNumArg(); i++) {
			if(i != 0)
				s += ", ";
			s += getArg(i).getType().toString();
		}

		return s + ")";
	}

	/*	Access								*/
	syn lazy boolean Expr.isAccess() = false;
	eq Access.isAccess() = true;

	syn lazy boolean ASTNode.isAbstractDot() = false;
	eq AbstractDot.isAbstractDot() = true;
	syn lazy boolean Access.isAbstractDotParent() = getParent().isAbstractDot();

	syn lazy AbstractDot Access.getQualifiedAccess() {
		if(isAbstractDotParent()) {
			AbstractDot p = (AbstractDot) getParent();
			if(p.getLeft().equals(this)) {
				if(p.isAbstractDotParent())
					return (AbstractDot) p.getParent();
			}
			else
				return p;
		}

		return null;
	}

	syn lazy Access Access.getLastAccess() {
		Access a;
		for(a = this;a.isAbstractDot(); a = ((AbstractDot) a).getRight());
		return a;
	}

	eq ArrayTypeAccess.getLastAccess() = getAccess().getLastAccess();

	syn lazy String Access.getQualifiedString() =
		(isAbstractDotParent()) ?
			((Access) getParent()).getQualifiedString() :
			"";

	eq AbstractDot.getQualifiedString() =
		(isAbstractDotParent() ?
			((Access) getParent()).getQualifiedString() + ".":
			""
		) +
		getLeft().toString();

	syn lazy int Access.countDims() = 0;
	eq ArrayTypeAccess.countDims() = 1 + getAccess().countDims();

	/*	ParseName							*/
	ParseName contributes getVariableDecl()
	when getVariableDecl() != null && getVariableDecl().isField()
	to MethodDecl.getUsedTypestateFields() for getMethodDeclAncestor();

	syn lazy VariableDecl ParseName.getVariableDecl() {
		if(!getType().isTypestateClassDeclType())
			return null;
		if(getQualifiedAccess() != null)
			return lookupVariable(getQualifiedType()).getVariableDecl();
		return lookupVariable().getVariableDecl();
	}

	inh MethodDecl ParseName.getMethodDeclAncestor();

	// ArrayTypeWithSizeAccess inherits ArrayTypeAccess
	syn lazy boolean Access.hasDims() = countDims() != 0;

	/*	VariableDecl
	 *	FieldDecl
	 *	VarDeclStmt							*/
	inh boolean VariableDecl.isField();
	eq FieldDecl.getVariableDecl(int i).isField() = true;
	eq VarDeclStmt.getVariableDecl(int i).isField() = false;

	inh Modifiers VariableDecl.getModifiers();
	eq FieldDecl.getVariableDecl(int i).getModifiers() = getModifiers();
	eq VarDeclStmt.getVariableDecl(int i).getModifiers() = getModifiers();

	inh Access VariableDecl.getTypeAccess();
	eq FieldDecl.getVariableDecl(int i).getTypeAccess() = getTypeAccess();
	eq VarDeclStmt.getVariableDecl(int i).getTypeAccess() = getTypeAccess();

	inh ClassDecl VariableDecl.getClassDeclAncestor();

	/*	SwitchStmt							*/
	coll Set<String> SwitchStmt.getCaseLabels() [new HashSet<String>()] with add root SwitchStmt;
	ConstCase contributes getValue().toString() to SwitchStmt.getCaseLabels() for getSwitchStmtAncestor();

	inh SwitchStmt Case.getSwitchStmtAncestor();
	eq SwitchStmt.getBlock().getSwitchStmtAncestor() = this;

	/*	Modifiers							*/
	private boolean Modifiers.isModifier(String mod) {
		for(int i = 0; i < getNumModifier(); i++)
			if(getModifier(i).getID().equals(mod))
				return true;
		return false;
	}

	syn lazy boolean Modifiers.isPublic() = isModifier("public");
	syn lazy boolean Modifiers.isProtected() = isModifier("protected");
	syn lazy boolean Modifiers.isPrivate() = isModifier("private");
	syn lazy boolean Modifiers.isStatic() = isModifier("static");
	syn lazy boolean Modifiers.isFinal() = isModifier("final");

}
