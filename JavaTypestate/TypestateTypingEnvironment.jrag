aspect TypestateTypingEnvironment {

	/*******************************************************************************/
	/*                 Type Environment Structures                                 */
	/*******************************************************************************/

	class TypestateVar {
		GraphNode current;
		Map<ASTNode, GraphNode> end;
		Map<ASTNode, GraphNode> start;

		private ArrayList<GraphNode> startGraph;
		private ArrayList<Expr> startExpr;
		private ArrayList<GraphNode> errorGraph;
		private ArrayList<ASTNode> errorExpr;

		TypestateVar() {
			current = new EndNode();

			end = new HashMap<ASTNode, GraphNode>();
			start = new HashMap<ASTNode, GraphNode>();
			startGraph = new ArrayList<GraphNode>();
			startExpr = new ArrayList<Expr>();

			errorGraph = new ArrayList<GraphNode>();
			errorExpr = new ArrayList<ASTNode>();
		}

		protected void resetCurrent() {
			current = new EndNode();
		}

		private void addErrorGraph(ASTNode e) {
			errorGraph.add(current);
			errorExpr.add(e);
			resetCurrent();
		}

		protected void addTypestate(Expr e, BodyDecl bd) {
			if(current.isReturned()) {
				bd.returnGraph.add(current);
				bd.returnExpr.add(e);
				bd.returnTypestate.add(this);
			}
			else if(current.isPlugged()) {
				bd.pluggedGraph.add(current);
				bd.pluggedExpr.add(e);
				bd.pluggedTypestate.add(this);
			}
			else {
				startGraph.add(current);
				startExpr.add(e);
			}
			resetCurrent();
		}

		protected void checkError(ASTNode e) {
			//has more than EndNodes/LoopNodes
			if(current.onlyEndNodes() == -1)
				addErrorGraph(e);
		}

		protected void checkError(ASTNode e, BodyDecl bd) {
			int c = current.onlyEndNodes();
			//has more than EndNodes/LoopNodes
			if(c == -1)
				addErrorGraph(e);
			//has only LoopNodes/PlugNodes
			else if(c == 0)
				addTypestate((Expr) e, bd);
		}

		protected void connectGraph(BodyDecl bd) {
		}

		protected GraphNode getConnectionGraph(BodyDecl bd) {
			return null;
		}

		protected void reportErrors(String errorMessage) {
			for(int i = errorGraph.size() - 1; i >= 0; i--)
				errorExpr.get(i).addSemanticError(errorMessage);
		}

		protected void checkTypestate(GraphNode t, String errorMessage) {
			for(int i = startGraph.size() - 1; i >= 0; i--) {
				GraphNode n = startGraph.get(i);
				n.normalise();
//				System.out.println("-----------------------");
//				System.out.println(startExpr.get(i));
//				n.printPaths();
//				System.out.println("------------------------");
				if(!t.includes(n)) {
					//TODO Recheck here... Maybe you can engineer this part somehow.
					for(GraphNode m: t.getErrorNode().next) {
						t.getErrorNode().getExpr().addSemanticError("Typestate mismatch. Found: " + m.toString() + ". Expected: " + t.getExpectedNode().nextToString() + ".");
//						m.getExpr().addSemanticError("Typestate mismatch. Found: " + m.toString() + ". Expected: " + t.getExpectedNode().nextToString() + ".");
					}
//					startExpr.get(i).addSemanticError(errorMessage);
				}
			}

		}
	}

	class TypestatePar extends TypestateVar {
		private LoopNode parameterNode;

		TypestatePar() {
			super();
			parameterNode = new LoopNode();
		}

		protected void connectGraph(BodyDecl bd) {
			parameterNode.addNext(current);
		}

		protected GraphNode getConnectionGraph(BodyDecl bd) {
			return parameterNode;
		}
	}

	class TypestateField extends TypestateVar {
		private Map<BodyDecl, GraphNode> connectGraph;

		TypestateField(Set<BodyDecl> bodyDecls) {
			super();

			connectGraph = new HashMap<BodyDecl, GraphNode>();
			for(BodyDecl bd: bodyDecls)
				connectGraph.put(bd, new LoopNode());

			current = new PlugNode(this);
		}

		protected void connectGraph(BodyDecl bd) {
			connectGraph.get(bd).addNext(current);
			current = new PlugNode(this);
		}

		protected GraphNode getConnectionGraph(BodyDecl bd) {
			return connectGraph.get(bd);
		}

	}
}
