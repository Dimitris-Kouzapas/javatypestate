package file_example;

class FileFactory typestate FactoryProtocol {
	private File myFile;

/*
	FileFactory() {
		this("file.txt");
	}

	FileFactory(String f) {
		myFile = new File(f);
	}
*/

//	FileFactory() {
//		this(new File("file.txt"));
//	}

	FileFactory(File f) {
		myFile = new File("aaa");
		foo();
	//	f = new File("a");
		myFile = f;
	//	myFile = new File("aaa");
	//	myFile.read();
	}

	File new_File() {
		//myFile = new File("file.txt");
		//myFile.open();
		//foo();
		return myFile;
	}

	private void foo() {
//		foo();
		//File myFile = new_File();
//		myFile = new_File();
//		File a = new_File();
//		File myFile = a;
//		if(true)
//			myFile = a;
//		else
//			myFile = new File("file.txt");
//		myFile = new File("asd");

		switch(myFile.open().getEnum()) {
			case Status.OK:
				loop:
				while(true) {
					switch(myFile.hasNext().getEnum()) {
						case BooleanEnum.TRUE:
							myFile.read();
							break;
						case BooleanEnum.FALSE:
							break loop;
					}
				}
				myFile.close();
				break;
			case Status.ERROR:
				System.out.println("file not found!");
				break;
		}

		//myFile.close();

	}
}
